generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         BigInt       @id
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  login      String       @db.VarChar
  name       String?      @db.VarChar

  repos      RepoAccess[]
  runs        Run[]

  @@map("user")
}

model Repo {
  id              BigInt       @id @default(autoincrement())
  created_at      DateTime?    @default(now()) @db.Timestamp(6)
  owner           String       @db.VarChar
  name            String       @db.VarChar
  installation_id Int?
  workflows       Workflow[]
  access          RepoAccess[]

  @@map("repo")
}

model RepoAccess {
  repo_id BigInt
  user_id BigInt
  type    AccessType

  repo Repo @relation(fields: [repo_id], references: [id], map: "fk_repo")
  user User @relation(fields: [user_id], references: [id], map: "fk_user")

  @@id([repo_id, user_id])
  @@map("repo_access")
}

enum AccessType {
  read
  write
  admin
}

model Workflow {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamp(6)
  name       String?   @db.VarChar
  path       String    @db.VarChar
  repo_id    BigInt
  repo       Repo      @relation(fields: [repo_id], references: [id], map: "fk_repo")
  runs       Run[]

  @@map("workflow")
}

model Run {
  id          BigInt         @id @default(autoincrement())
  created_at  DateTime?      @default(now()) @db.Timestamptz(6)
  run_number  Int
  run_attempt Int
  ref         String         @db.VarChar
  sha         String         @db.VarChar
  status      String         @db.VarChar
  conclusion  RunConclusion?
  started_at  DateTime       @db.Timestamp(6)
  data        Json?          @db.Json
  workflow_id BigInt
  workflow    Workflow       @relation(fields: [workflow_id], references: [id], map: "fk_workflow")
  actor_id    BigInt?
  actor       User?           @relation(fields: [actor_id], references: [id], map: "fk_actor")
  jobs        Job[]

  @@map("run")
}

enum RunConclusion {
  success
  failure
  neutral
  cancelled
  timed_out
  action_required
  stale
  skipped

  @@map("run_conclusion")
}

model Job {
  id           BigInt         @id @default(autoincrement())
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  started_at   DateTime       @db.Timestamp(6)
  completed_at DateTime?      @db.Timestamp(6)
  status       String?        @db.VarChar
  conclusion   JobConclusion?
  name         String?        @db.VarChar
  data         Json?          @db.Json
  run_id       BigInt
  run          Run            @relation(fields: [run_id], references: [id], map: "fk_run")

  @@map("job")
}

enum JobConclusion {
  success
  failure
  cancelled
  skipped

  @@map("job_conclusion")
}
